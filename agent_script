# Import required modules
import os
import requests
import json

# Vogent API endpoint for outbound calls
VOGENT_API_URL = "https://api.vogent.ai/api/dials"
# Retrieve Vogent API key from environment variable
API_KEY = "elto_DfXARu0I6uEEENntZkWvoCIkQPodVvjA"

# Exit if API key is not set
if not API_KEY:
    print("Error: VOGENT_API_KEY environment variable not set.")
    exit(1)

# Helper function to safely get user input
def get_input(prompt):
    try:
        return input(prompt)
    except EOFError:
        return ""

# Prompt user for the phone number to call
# Example: +14125551212
to_number = get_input("Enter the phone number to call (e.g., +14125551212): ")

# Prompt user for the patient's name
patient_name = get_input("Enter the patient's name (e.g., John Smith): ")

# Load patient data from JSON file
patients_file = "mock_hospital_patients.json"
try:
    with open(patients_file, "r") as f:
        patients = json.load(f)
except Exception as e:
    print(f"Error loading patient data: {e}")
    exit(1)

# Find patient by name
patient_info = next((p for p in patients if p["Name"].lower() == patient_name.lower()), None)
if not patient_info:
    print(f"Patient '{patient_name}' not found in records.")
    exit(1)

# Build a detailed prompt for Vogent using all patient info
agent_prompt = (
    f"You are Sarah from ABC Medical Group. You are calling the insurance company for a prior authorization regarding the following patient:\n"
    f"- Name: {patient_info['Name']}\n"
    f"- Patient ID: {patient_info['Patient_ID']}\n"
    f"- Age: {patient_info['Age']}\n"
    f"- Sex: {patient_info['Sex']}\n"
    f"- Reason for Visit: {patient_info['Reason_For_Visit']}\n"
    f"- Injury/Diagnosis: {patient_info['Injury_Type']}\n"
    f"- ICD-10 Code: {patient_info['ICD10_Code']}\n"
    f"- Treatment: {patient_info['Treatment']}\n"
    f"- Outcome: {patient_info['Outcome']}\n\n"
    "Your objectives are:\n"
    "1. Provide the insurer with all patient and treatment details above.\n"
    "2. Request prior authorization approval.\n"
    "3. Record the approval number or note if the request is denied.\n\n"
    "If asked for details, always give the full information from the variables.\n"
    "Do not end the call until you have the authorization status.\n"
    "At the end of the call, say 'thank you' and hang up <|hangup|>."
)

# Build call_agent_input using patient info and prompt
call_agent_input = {
    "doctor_name": "John Smith, M.D.",
    "practice_name": "Springfield Family Clinic",
    "provider_npi": "1234567890",
    "provider_phone": "412-555-1212",
    "patient_name": patient_info["Name"],
    "patient_dob": "N/A",  # DOB not present in mock data
    "patient_id": patient_info["Patient_ID"],
    "patient_plan": "N/A",  # Plan not present in mock data
    "procedure_name": patient_info["Treatment"],
    "procedure_code": "N/A",  # Not present in mock data
    "diagnosis": patient_info["Injury_Type"],
    "diagnosis_code": patient_info["ICD10_Code"],
    "date_of_service": "2025-10-01",
    "prompt": agent_prompt  # Use 'prompt' key for agent instructions
}

# Construct the payload for the Vogent dial API
payload = {
    "fromNumberId": "794fb43b-e023-47d0-8654-e60e0c71704e",  # Your Vogent number ID
    "toNumber": to_number,  # The phone number to call (user input)
    "aiVoiceId": "94c32748-865f-42e1-bb1a-3a6b4abc7d11",     # AI voice ID from Vogent voice library
    "callAgentId": "531155fb-e90d-4f35-80eb-da702ae93108",   # Your custom agent ID
    "versionedModelId": "a5948367-62d5-42be-a2df-6a2ee632d049", # Your model version ID
    "callAgentInput": call_agent_input  # Structured call details
}

# Print the payload for debugging
print("Payload being sent to Vogent:")
print(json.dumps(payload, indent=2))

# Set HTTP headers for the API request
headers = {
    "Authorization": f"Bearer {API_KEY}",
    "Content-Type": "application/json"
}

# Make the POST request to Vogent to trigger the outbound call
try:
    response = requests.post(VOGENT_API_URL, headers=headers, data=json.dumps(payload))
    response.raise_for_status()  # Raise error for bad HTTP status
    data = response.json()  # Parse JSON response
    print("Call triggered successfully!")
    print(json.dumps(data, indent=2))  # Pretty-print the response
except requests.exceptions.HTTPError as errh:
    print(f"HTTP error: {errh}")
    if errh.response is not None:
        print(errh.response.text)
except requests.exceptions.RequestException as err:
    print(f"Request error: {err}")

